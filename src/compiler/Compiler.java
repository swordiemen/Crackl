package compiler;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import analysis.Result;
import analysis.TypeChecker;
import exception.TypeCheckException;
import generation.Generator;
import generation.Line;
import generation.Program;
import grammar.CracklLexer;
import grammar.CracklParser;
import grammar.CracklParser.ProgramContext;

public class Compiler {
	public static final String PROGRAMS_PATH = "./programs/";
	public static final String OUTPUT_PATH = "./machine/";

	private TypeChecker checker;

	/**
	 * Creates a new Compiler class.
	 */
	public Compiler() {
		checker = new TypeChecker();
	}

	/**
	 * Takes the name of a file, and compiles it into a program that can be read by Sprockll.
	 * 
	 * @param fileName
	 *            The name of the file where the code is written.
	 * @return program The program created by the generator.
	 * @throws TypeCheckException
	 */
	public Program compile(String fileName) throws TypeCheckException
	{
		ParseTree tree = parse(fileName);
		System.out.println(tree);
		ParseTreeWalker walker = new ParseTreeWalker();
		walker.walk(checker, tree);
		if (!checker.hasErrors()) {
			Result result = checker.getResult();

			Generator generator = new Generator(result, checker.functions);
			try {
				generator.visit(tree);
			} catch (Exception e) {
				e.printStackTrace();
				// System.out.println(formatProgram(generator.getProgram()));
			}
			ArrayList<Line> programLines = generator.program;
			Program program = new Program(programLines, result.numberOfSprockells);
			System.out.println(program);
			return program;
		}
		else {
			System.out.println(checker.getErrors());
			throw new TypeCheckException("Build failed (TypeChecker)");
		}
	}

	/**
	 * Takes a file, and returns a parseTree of the code in the file.
	 * 
	 * @param fileName
	 *            Name of the file to be parsed.
	 * @return <b>parseTree</b> The resulting parseTree.
	 */
	public ParseTree parse(String fileName)
	{
		CharStream chars = null;
		try {
			chars = new ANTLRInputStream(new FileReader(PROGRAMS_PATH + fileName));
		} catch (IOException e) {
			e.printStackTrace();
		}
		Lexer lexer = new CracklLexer(chars);
		TokenStream tokens = new CommonTokenStream(lexer);
		CracklParser parser = new CracklParser(tokens);
		ProgramContext tree = parser.program();
		return tree;
	}

	/**
	 * Takes a program generated by the generator, and writes it to a file.
	 * 
	 * @param fileName
	 *            The name of the file
	 * @param program
	 *            The program generated by the generator.
	 * @throws IOException
	 */
	public void write(String fileName, Program program) throws IOException
	{
		if (!new File(OUTPUT_PATH).mkdirs()) {
		}
		File file = new File(OUTPUT_PATH + fileName);
		BufferedWriter bw = null;
		bw = new BufferedWriter(new FileWriter(file));

		bw.write(program.create());
		bw.close();
	}

	public static void main(String[] args)
	{
		Compiler compiler = new Compiler();
		try {
			String program_name = "peterson.crk";
			Program program = compiler.compile(program_name);
			if (false) {
				compiler.write(program_name + ".hs", program);
			}
			else {
				compiler.write("crk_program.hs", program);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (TypeCheckException e1) {
			e1.printStackTrace();
		}
	}
}
