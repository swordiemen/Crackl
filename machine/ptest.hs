import Sprockell.Sprockell
import Sprockell.System
import Sprockell.TypesEtc

prog :: [Instruction]
prog = [ 
	Push Zero,
	Push Zero,
	Push Zero,
	Push Zero,
	Const 8 RegE,
	Store RegE (Addr 0),
	Const 1 RegE,
	Read (Addr 1000),
	Receive RegD,
	Store RegD (Addr 1),
	Const 2 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Const 4 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Const 6 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Const 8 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Write RegD (Addr 1000),
	Const 0 RegD,
	Store RegD (Addr 2),
	Const 9 RegD,
	Store RegD (Addr 3),
	Load (Addr 2) RegD,
	Load (Addr 0) RegE,
	Compute Lt RegD RegE RegD,
	Compute Equal RegD Zero RegD,
	Branch RegD (Abs 47),
	Load (Addr 2) RegD,
	Load (Addr 1) RegE,
	Compute Add RegD RegE RegD,
	Read (Deref (RegD)),
	Receive RegE,
	Const 48 RegD,
	Compute Add RegE RegD RegE,
	Write RegE (Addr 16777216),
	Const 12 RegE,
	Write RegE (Addr 16777216),
	Load (Addr 2) RegE,
	Const 1 RegD,
	Compute Add RegD RegE RegD,
	Store RegD (Addr 2),
	Jump (Abs 27),
	Const 1 RegD,
	Read (Addr 1000),
	Receive RegE,
	Store RegE (Addr 4),
	Const 1 RegC,
	Write RegC (Deref (RegE)),
	Compute Add RegD RegE RegE,
	Const 0 RegC,
	Write RegC (Deref (RegE)),
	Compute Add RegD RegE RegE,
	Const 0 RegC,
	Write RegC (Deref (RegE)),
	Compute Add RegD RegE RegE,
	Const 1 RegC,
	Write RegC (Deref (RegE)),
	Compute Add RegD RegE RegE,
	Write RegE (Addr 1000),
	Const 0 RegE,
	Store RegE (Addr 2),
	Load (Addr 2) RegE,
	Const 4 RegD,
	Compute Lt RegE RegD RegE,
	Compute Equal RegE Zero RegE,
	Branch RegE (Abs 86),
	Load (Addr 2) RegE,
	Load (Addr 4) RegD,
	Compute Add RegE RegD RegE,
	Read (Deref (RegE)),
	Receive RegD,
	Const 48 RegE,
	Compute Add RegD RegE RegD,
	Write RegD (Addr 16777216),
	Const 12 RegD,
	Write RegD (Addr 16777216),
	Load (Addr 2) RegD,
	Const 1 RegE,
	Compute Add RegE RegD RegE,
	Store RegE (Addr 2),
	Jump (Abs 66),
	Const 20 RegE,
	Store RegE (Addr 5),
	Load (Addr 5) RegE,
	Read (Addr 1000),
	Receive RegD,
	Store RegD (Addr 6),
	Compute Add RegE RegD RegD,
	Write RegD (Addr 1000),
	Const 0 RegD,
	Store RegD (Addr 2),
	Load (Addr 2) RegD,
	Load (Addr 5) RegE,
	Compute Lt RegD RegE RegD,
	Compute Equal RegD Zero RegD,
	Branch RegD (Abs 133),
	Load (Addr 2) RegD,
	Const 40 RegE,
	Compute Gt RegD RegE RegD,
	Compute Equal RegD Zero RegD,
	Branch RegD (Abs 123),
	Load (Addr 2) RegD,
	Const 50 RegE,
	Compute Lt RegD RegE RegD,
	Compute Equal RegD Zero RegD,
	Branch RegD (Abs 117),
	Const 3 RegD,
	Load (Addr 2) RegE,
	Load (Addr 6) RegC,
	Compute Add RegC RegE RegC,
	Write RegD (Deref (RegC)),
	Jump (Abs 122),
	Const 4 RegC,
	Load (Addr 2) RegD,
	Load (Addr 6) RegE,
	Compute Add RegE RegD RegE,
	Write RegC (Deref (RegE)),
	Jump (Abs 128),
	Const 6 RegE,
	Load (Addr 2) RegC,
	Load (Addr 6) RegD,
	Compute Add RegD RegC RegD,
	Write RegE (Deref (RegD)),
	Load (Addr 2) RegD,
	Const 1 RegE,
	Compute Add RegE RegD RegE,
	Store RegE (Addr 2),
	Jump (Abs 96),
	Const 0 RegE,
	Store RegE (Addr 2),
	Load (Addr 2) RegE,
	Load (Addr 5) RegD,
	Compute Lt RegE RegD RegE,
	Compute Equal RegE Zero RegE,
	Branch RegE (Abs 155),
	Load (Addr 2) RegE,
	Load (Addr 6) RegD,
	Compute Add RegE RegD RegE,
	Read (Deref (RegE)),
	Receive RegD,
	Const 48 RegE,
	Compute Add RegD RegE RegD,
	Write RegD (Addr 16777216),
	Const 12 RegD,
	Write RegD (Addr 16777216),
	Load (Addr 2) RegD,
	Const 1 RegE,
	Compute Add RegE RegD RegE,
	Store RegE (Addr 2),
	Jump (Abs 135),
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	EndProg	]
main = run 1 prog