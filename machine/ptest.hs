import Sprockell.Sprockell
import Sprockell.System
import Sprockell.TypesEtc

prog :: [Instruction]
prog = [ 
	Push Zero,
	Push Zero,
	Push Zero,
	Push Zero,
	Const 8 RegE,
	Store RegE (Addr 0),
	Const 1 RegE,
	Read (Addr 1000),
	Receive RegD,
	Store RegD (Addr 4),
	Const 2 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Const 4 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Const 6 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Const 8 RegC,
	Write RegC (Deref (RegD)),
	Compute Add RegE RegD RegD,
	Write RegD (Addr 1000),
	Const 0 RegD,
	Store RegD (Addr 8),
	Const 9 RegD,
	Store RegD (Addr 12),
	Load (Addr 8) RegD,
	Load (Addr 0) RegE,
	Compute Lt RegD RegE RegD,
	Compute Equal RegD Zero RegD,
	Branch RegD (Abs 45),
	Load (Addr 8) RegD,
	Load (Addr 4) RegE,
	Compute Add RegD RegE RegD,
	Read (Deref (RegD)),
	Receive RegE,
	Const 48 RegD,
	Compute Add RegE RegD RegE,
	Write RegE (Addr 16777216),
	Load (Addr 8) RegE,
	Const 1 RegD,
	Compute Add RegD RegE RegD,
	Store RegD (Addr 8),
	Jump (Abs 27),
	Const 80 RegD,
	Store RegD (Addr 16),
	Load (Addr 16) RegD,
	Read (Addr 1000),
	Receive RegE,
	Store RegE (Addr 20),
	Compute Add RegD RegE RegE,
	Write RegE (Addr 1000),
	Const 0 RegE,
	Store RegE (Addr 8),
	Load (Addr 8) RegE,
	Load (Addr 16) RegD,
	Compute Lt RegE RegD RegE,
	Compute Equal RegE Zero RegE,
	Branch RegE (Abs 92),
	Load (Addr 8) RegE,
	Const 40 RegD,
	Compute Gt RegE RegD RegE,
	Compute Equal RegE Zero RegE,
	Branch RegE (Abs 82),
	Load (Addr 8) RegE,
	Const 50 RegD,
	Compute Lt RegE RegD RegE,
	Compute Equal RegE Zero RegE,
	Branch RegE (Abs 76),
	Const 3 RegE,
	Load (Addr 8) RegD,
	Load (Addr 20) RegC,
	Compute Add RegC RegD RegC,
	Write RegE (Deref (RegC)),
	Jump (Abs 81),
	Const 4 RegC,
	Load (Addr 8) RegE,
	Load (Addr 20) RegD,
	Compute Add RegD RegE RegD,
	Write RegC (Deref (RegD)),
	Jump (Abs 87),
	Const 6 RegD,
	Load (Addr 8) RegC,
	Load (Addr 20) RegE,
	Compute Add RegE RegC RegE,
	Write RegD (Deref (RegE)),
	Load (Addr 8) RegE,
	Const 1 RegD,
	Compute Add RegD RegE RegD,
	Store RegD (Addr 8),
	Jump (Abs 55),
	Const 0 RegD,
	Store RegD (Addr 8),
	Load (Addr 8) RegD,
	Load (Addr 16) RegE,
	Compute Lt RegD RegE RegD,
	Compute Equal RegD Zero RegD,
	Branch RegD (Abs 112),
	Load (Addr 8) RegD,
	Load (Addr 20) RegE,
	Compute Add RegD RegE RegD,
	Read (Deref (RegD)),
	Receive RegE,
	Const 48 RegD,
	Compute Add RegE RegD RegE,
	Write RegE (Addr 16777216),
	Load (Addr 8) RegE,
	Const 1 RegD,
	Compute Add RegD RegE RegD,
	Store RegD (Addr 8),
	Jump (Abs 94),
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	Nop,
	EndProg	]
main = run 1 prog